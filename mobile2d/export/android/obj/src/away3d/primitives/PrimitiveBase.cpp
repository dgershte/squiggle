#include <hxcpp.h>

#ifndef INCLUDED_away3d_core_base_CompactSubGeometry
#include <away3d/core/base/CompactSubGeometry.h>
#endif
#ifndef INCLUDED_away3d_core_base_Geometry
#include <away3d/core/base/Geometry.h>
#endif
#ifndef INCLUDED_away3d_core_base_ISubGeometry
#include <away3d/core/base/ISubGeometry.h>
#endif
#ifndef INCLUDED_away3d_core_base_SubGeometryBase
#include <away3d/core/base/SubGeometryBase.h>
#endif
#ifndef INCLUDED_away3d_errors_AbstractMethodError
#include <away3d/errors/AbstractMethodError.h>
#endif
#ifndef INCLUDED_away3d_library_assets_IAsset
#include <away3d/library/assets/IAsset.h>
#endif
#ifndef INCLUDED_away3d_library_assets_NamedAssetBase
#include <away3d/library/assets/NamedAssetBase.h>
#endif
#ifndef INCLUDED_away3d_primitives_PrimitiveBase
#include <away3d/primitives/PrimitiveBase.h>
#endif
#ifndef INCLUDED_flash_errors_Error
#include <flash/errors/Error.h>
#endif
#ifndef INCLUDED_flash_events_EventDispatcher
#include <flash/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_flash_events_IEventDispatcher
#include <flash/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_flash_geom_Matrix3D
#include <flash/geom/Matrix3D.h>
#endif
namespace away3d{
namespace primitives{

Void PrimitiveBase_obj::__construct()
{
HX_STACK_PUSH("PrimitiveBase::new","away3d/primitives/PrimitiveBase.hx",24);
{
	HX_STACK_LINE(25)
	super::__construct();
	HX_STACK_LINE(26)
	this->_geomDirty = true;
	HX_STACK_LINE(27)
	this->_uvDirty = true;
	HX_STACK_LINE(28)
	this->_subGeometry = ::away3d::core::base::CompactSubGeometry_obj::__new();
	HX_STACK_LINE(29)
	this->_subGeometry->set_autoGenerateDummyUVs(false);
	HX_STACK_LINE(30)
	this->addSubGeometry(this->_subGeometry);
}
;
	return null();
}

PrimitiveBase_obj::~PrimitiveBase_obj() { }

Dynamic PrimitiveBase_obj::__CreateEmpty() { return  new PrimitiveBase_obj; }
hx::ObjectPtr< PrimitiveBase_obj > PrimitiveBase_obj::__new()
{  hx::ObjectPtr< PrimitiveBase_obj > result = new PrimitiveBase_obj();
	result->__construct();
	return result;}

Dynamic PrimitiveBase_obj::__Create(hx::DynamicArray inArgs)
{  hx::ObjectPtr< PrimitiveBase_obj > result = new PrimitiveBase_obj();
	result->__construct();
	return result;}

Void PrimitiveBase_obj::validate( ){
{
		HX_STACK_PUSH("PrimitiveBase::validate","away3d/primitives/PrimitiveBase.hx",133);
		HX_STACK_THIS(this);
		HX_STACK_LINE(134)
		if ((this->_geomDirty)){
			HX_STACK_LINE(134)
			this->updateGeometry();
		}
		HX_STACK_LINE(135)
		if ((this->_uvDirty)){
			HX_STACK_LINE(135)
			this->updateUVs();
		}
	}
return null();
}


Void PrimitiveBase_obj::updateUVs( ){
{
		HX_STACK_PUSH("PrimitiveBase::updateUVs","away3d/primitives/PrimitiveBase.hx",128);
		HX_STACK_THIS(this);
		HX_STACK_LINE(129)
		this->buildUVs(this->_subGeometry);
		HX_STACK_LINE(130)
		this->_uvDirty = false;
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(PrimitiveBase_obj,updateUVs,(void))

Void PrimitiveBase_obj::updateGeometry( ){
{
		HX_STACK_PUSH("PrimitiveBase::updateGeometry","away3d/primitives/PrimitiveBase.hx",119);
		HX_STACK_THIS(this);
		HX_STACK_LINE(120)
		this->buildGeometry(this->_subGeometry);
		HX_STACK_LINE(121)
		this->_geomDirty = false;
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(PrimitiveBase_obj,updateGeometry,(void))

Void PrimitiveBase_obj::invalidateUVs( ){
{
		HX_STACK_PUSH("PrimitiveBase::invalidateUVs","away3d/primitives/PrimitiveBase.hx",111);
		HX_STACK_THIS(this);
		HX_STACK_LINE(111)
		this->_uvDirty = true;
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(PrimitiveBase_obj,invalidateUVs,(void))

Void PrimitiveBase_obj::invalidateGeometry( ){
{
		HX_STACK_PUSH("PrimitiveBase::invalidateGeometry","away3d/primitives/PrimitiveBase.hx",103);
		HX_STACK_THIS(this);
		HX_STACK_LINE(103)
		this->_geomDirty = true;
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(PrimitiveBase_obj,invalidateGeometry,(void))

Void PrimitiveBase_obj::buildUVs( ::away3d::core::base::CompactSubGeometry target){
{
		HX_STACK_PUSH("PrimitiveBase::buildUVs","away3d/primitives/PrimitiveBase.hx",95);
		HX_STACK_THIS(this);
		HX_STACK_ARG(target,"target");
		HX_STACK_LINE(95)
		hx::Throw (::away3d::errors::AbstractMethodError_obj::__new(null(),null()));
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(PrimitiveBase_obj,buildUVs,(void))

Void PrimitiveBase_obj::buildGeometry( ::away3d::core::base::CompactSubGeometry target){
{
		HX_STACK_PUSH("PrimitiveBase::buildGeometry","away3d/primitives/PrimitiveBase.hx",86);
		HX_STACK_THIS(this);
		HX_STACK_ARG(target,"target");
		HX_STACK_LINE(86)
		hx::Throw (::away3d::errors::AbstractMethodError_obj::__new(null(),null()));
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(PrimitiveBase_obj,buildGeometry,(void))

Void PrimitiveBase_obj::applyTransformation( ::flash::geom::Matrix3D transform){
{
		HX_STACK_PUSH("PrimitiveBase::applyTransformation","away3d/primitives/PrimitiveBase.hx",76);
		HX_STACK_THIS(this);
		HX_STACK_ARG(transform,"transform");
		HX_STACK_LINE(77)
		if ((this->_geomDirty)){
			HX_STACK_LINE(77)
			this->updateGeometry();
		}
		HX_STACK_LINE(78)
		this->super::applyTransformation(transform);
	}
return null();
}


Void PrimitiveBase_obj::scaleUV( hx::Null< Float >  __o_scaleU,hx::Null< Float >  __o_scaleV){
Float scaleU = __o_scaleU.Default(1);
Float scaleV = __o_scaleV.Default(1);
	HX_STACK_PUSH("PrimitiveBase::scaleUV","away3d/primitives/PrimitiveBase.hx",67);
	HX_STACK_THIS(this);
	HX_STACK_ARG(scaleU,"scaleU");
	HX_STACK_ARG(scaleV,"scaleV");
{
		HX_STACK_LINE(68)
		if ((this->_uvDirty)){
			HX_STACK_LINE(68)
			this->updateUVs();
		}
		HX_STACK_LINE(69)
		this->super::scaleUV(scaleU,scaleV);
	}
return null();
}


Void PrimitiveBase_obj::scale( Float scale){
{
		HX_STACK_PUSH("PrimitiveBase::scale","away3d/primitives/PrimitiveBase.hx",58);
		HX_STACK_THIS(this);
		HX_STACK_ARG(scale,"scale");
		HX_STACK_LINE(59)
		if ((this->_geomDirty)){
			HX_STACK_LINE(59)
			this->updateGeometry();
		}
		HX_STACK_LINE(60)
		this->super::scale(scale);
	}
return null();
}


::away3d::core::base::Geometry PrimitiveBase_obj::clone( ){
	HX_STACK_PUSH("PrimitiveBase::clone","away3d/primitives/PrimitiveBase.hx",48);
	HX_STACK_THIS(this);
	HX_STACK_LINE(49)
	if ((this->_geomDirty)){
		HX_STACK_LINE(49)
		this->updateGeometry();
	}
	HX_STACK_LINE(50)
	if ((this->_uvDirty)){
		HX_STACK_LINE(50)
		this->updateUVs();
	}
	HX_STACK_LINE(51)
	return this->super::clone();
}


Array< ::Dynamic > PrimitiveBase_obj::get_subGeometries( ){
	HX_STACK_PUSH("PrimitiveBase::get_subGeometries","away3d/primitives/PrimitiveBase.hx",38);
	HX_STACK_THIS(this);
	HX_STACK_LINE(39)
	if ((this->_geomDirty)){
		HX_STACK_LINE(39)
		this->updateGeometry();
	}
	HX_STACK_LINE(40)
	if ((this->_uvDirty)){
		HX_STACK_LINE(40)
		this->updateUVs();
	}
	HX_STACK_LINE(41)
	return this->super::get_subGeometries();
}



PrimitiveBase_obj::PrimitiveBase_obj()
{
}

void PrimitiveBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PrimitiveBase);
	HX_MARK_MEMBER_NAME(_subGeometry,"_subGeometry");
	HX_MARK_MEMBER_NAME(_uvDirty,"_uvDirty");
	HX_MARK_MEMBER_NAME(_geomDirty,"_geomDirty");
	super::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PrimitiveBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_subGeometry,"_subGeometry");
	HX_VISIT_MEMBER_NAME(_uvDirty,"_uvDirty");
	HX_VISIT_MEMBER_NAME(_geomDirty,"_geomDirty");
	super::__Visit(HX_VISIT_ARG);
}

Dynamic PrimitiveBase_obj::__Field(const ::String &inName,bool inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return scale_dyn(); }
		if (HX_FIELD_EQ(inName,"clone") ) { return clone_dyn(); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scaleUV") ) { return scaleUV_dyn(); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validate") ) { return validate_dyn(); }
		if (HX_FIELD_EQ(inName,"buildUVs") ) { return buildUVs_dyn(); }
		if (HX_FIELD_EQ(inName,"_uvDirty") ) { return _uvDirty; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"updateUVs") ) { return updateUVs_dyn(); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_geomDirty") ) { return _geomDirty; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_subGeometry") ) { return _subGeometry; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"invalidateUVs") ) { return invalidateUVs_dyn(); }
		if (HX_FIELD_EQ(inName,"buildGeometry") ) { return buildGeometry_dyn(); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateGeometry") ) { return updateGeometry_dyn(); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_subGeometries") ) { return get_subGeometries_dyn(); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"invalidateGeometry") ) { return invalidateGeometry_dyn(); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"applyTransformation") ) { return applyTransformation_dyn(); }
	}
	return super::__Field(inName,inCallProp);
}

Dynamic PrimitiveBase_obj::__SetField(const ::String &inName,const Dynamic &inValue,bool inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_uvDirty") ) { _uvDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_geomDirty") ) { _geomDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_subGeometry") ) { _subGeometry=inValue.Cast< ::away3d::core::base::CompactSubGeometry >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PrimitiveBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_CSTRING("_subGeometry"));
	outFields->push(HX_CSTRING("_uvDirty"));
	outFields->push(HX_CSTRING("_geomDirty"));
	super::__GetFields(outFields);
};

static ::String sStaticFields[] = {
	String(null()) };

static ::String sMemberFields[] = {
	HX_CSTRING("validate"),
	HX_CSTRING("updateUVs"),
	HX_CSTRING("updateGeometry"),
	HX_CSTRING("invalidateUVs"),
	HX_CSTRING("invalidateGeometry"),
	HX_CSTRING("buildUVs"),
	HX_CSTRING("buildGeometry"),
	HX_CSTRING("applyTransformation"),
	HX_CSTRING("scaleUV"),
	HX_CSTRING("scale"),
	HX_CSTRING("clone"),
	HX_CSTRING("get_subGeometries"),
	HX_CSTRING("_subGeometry"),
	HX_CSTRING("_uvDirty"),
	HX_CSTRING("_geomDirty"),
	String(null()) };

static void sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PrimitiveBase_obj::__mClass,"__mClass");
};

static void sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PrimitiveBase_obj::__mClass,"__mClass");
};

Class PrimitiveBase_obj::__mClass;

void PrimitiveBase_obj::__register()
{
	hx::Static(__mClass) = hx::RegisterClass(HX_CSTRING("away3d.primitives.PrimitiveBase"), hx::TCanCast< PrimitiveBase_obj> ,sStaticFields,sMemberFields,
	&__CreateEmpty, &__Create,
	&super::__SGetClass(), 0, sMarkStatics, sVisitStatics);
}

void PrimitiveBase_obj::__boot()
{
}

} // end namespace away3d
} // end namespace primitives
