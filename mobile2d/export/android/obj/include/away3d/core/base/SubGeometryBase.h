#ifndef INCLUDED_away3d_core_base_SubGeometryBase
#define INCLUDED_away3d_core_base_SubGeometryBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(away3d,core,base,Geometry)
HX_DECLARE_CLASS3(away3d,core,base,SubGeometryBase)
HX_DECLARE_CLASS3(away3d,core,managers,Stage3DProxy)
HX_DECLARE_CLASS3(away3d,library,assets,IAsset)
HX_DECLARE_CLASS3(away3d,library,assets,NamedAssetBase)
HX_DECLARE_CLASS2(flash,display3D,Context3D)
HX_DECLARE_CLASS2(flash,display3D,IndexBuffer3D)
HX_DECLARE_CLASS2(flash,display3D,VertexBuffer3D)
HX_DECLARE_CLASS2(flash,events,EventDispatcher)
HX_DECLARE_CLASS2(flash,events,IEventDispatcher)
HX_DECLARE_CLASS2(flash,geom,Matrix3D)
namespace away3d{
namespace core{
namespace base{


class HXCPP_CLASS_ATTRIBUTES  SubGeometryBase_obj : public hx::Object{
	public:
		typedef hx::Object super;
		typedef SubGeometryBase_obj OBJ_;
		SubGeometryBase_obj();
		Void __construct();

	public:
		static hx::ObjectPtr< SubGeometryBase_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		~SubGeometryBase_obj();

		HX_DO_RTTI;
		static void __boot();
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_CSTRING("SubGeometryBase"); }

		virtual Array< Float > updateDummyUVs( Array< Float > target);
		Dynamic updateDummyUVs_dyn();

		virtual Void applyTransformation( ::flash::geom::Matrix3D transform);
		Dynamic applyTransformation_dyn();

		virtual Void scale( Float scale);
		Dynamic scale_dyn();

		virtual Void scaleUV( hx::Null< Float >  scaleU,hx::Null< Float >  scaleV);
		Dynamic scaleUV_dyn();

		virtual Float get_scaleV( );
		Dynamic get_scaleV_dyn();

		virtual Float get_scaleU( );
		Dynamic get_scaleU_dyn();

		virtual ::away3d::core::base::Geometry set_parentGeometry( ::away3d::core::base::Geometry value);
		Dynamic set_parentGeometry_dyn();

		virtual ::away3d::core::base::Geometry get_parentGeometry( );
		Dynamic get_parentGeometry_dyn();

		virtual Void invalidateBounds( );
		Dynamic invalidateBounds_dyn();

		virtual int get_UVOffset( );
		Dynamic get_UVOffset_dyn();

		virtual int get_vertexTangentOffset( );
		Dynamic get_vertexTangentOffset_dyn();

		virtual int get_vertexNormalOffset( );
		Dynamic get_vertexNormalOffset_dyn();

		virtual int get_vertexOffset( );
		Dynamic get_vertexOffset_dyn();

		virtual int get_vertexTangentStride( );
		Dynamic get_vertexTangentStride_dyn();

		virtual int get_vertexNormalStride( );
		Dynamic get_vertexNormalStride_dyn();

		virtual int get_vertexStride( );
		Dynamic get_vertexStride_dyn();

		virtual Array< Float > get_UVData( );
		Dynamic get_UVData_dyn();

		virtual Array< Float > get_vertexTangentData( );
		Dynamic get_vertexTangentData_dyn();

		virtual Array< Float > get_vertexNormalData( );
		Dynamic get_vertexNormalData_dyn();

		virtual Array< Float > get_vertexPositionData( );
		Dynamic get_vertexPositionData_dyn();

		virtual Array< Float > get_vertexData( );
		Dynamic get_vertexData_dyn();

		virtual int get_UVStride( );
		Dynamic get_UVStride_dyn();

		virtual Void invalidateBuffers( Array< bool > invalid);
		Dynamic invalidateBuffers_dyn();

		virtual Array< Float > get_faceNormals( );
		Dynamic get_faceNormals_dyn();

		virtual bool set_autoDeriveVertexTangents( bool value);
		Dynamic set_autoDeriveVertexTangents_dyn();

		virtual bool get_autoDeriveVertexTangents( );
		Dynamic get_autoDeriveVertexTangents_dyn();

		virtual Void disposeVertexBuffers( Array< ::Dynamic > buffers);
		Dynamic disposeVertexBuffers_dyn();

		virtual Void disposeIndexBuffers( Array< ::Dynamic > buffers);
		Dynamic disposeIndexBuffers_dyn();

		virtual Void updateIndexData( Array< int > indices);
		Dynamic updateIndexData_dyn();

		virtual Array< int > get_indexData( );
		Dynamic get_indexData_dyn();

		virtual Void dispose( );
		Dynamic dispose_dyn();

		virtual Array< Float > updateVertexTangents( Array< Float > target);
		Dynamic updateVertexTangents_dyn();

		virtual Array< Float > updateVertexNormals( Array< Float > target);
		Dynamic updateVertexNormals_dyn();

		virtual Void updateFaceNormals( );
		Dynamic updateFaceNormals_dyn();

		virtual Void updateFaceTangents( );
		Dynamic updateFaceTangents_dyn();

		virtual ::flash::display3D::IndexBuffer3D getIndexBuffer( ::away3d::core::managers::Stage3DProxy stage3DProxy);
		Dynamic getIndexBuffer_dyn();

		virtual int get_numTriangles( );
		Dynamic get_numTriangles_dyn();

		virtual bool set_useFaceWeights( bool value);
		Dynamic set_useFaceWeights_dyn();

		virtual bool get_useFaceWeights( );
		Dynamic get_useFaceWeights_dyn();

		virtual bool set_autoDeriveVertexNormals( bool value);
		Dynamic set_autoDeriveVertexNormals_dyn();

		virtual bool get_autoDeriveVertexNormals( );
		Dynamic get_autoDeriveVertexNormals_dyn();

		virtual bool set_autoGenerateDummyUVs( bool value);
		Dynamic set_autoGenerateDummyUVs_dyn();

		virtual bool get_autoGenerateDummyUVs( );
		Dynamic get_autoGenerateDummyUVs_dyn();

		bool _uvsDirty;
		Float _scaleV;
		Float _scaleU;
		Array< Float > _faceWeights;
		Array< Float > _faceNormals;
		bool _vertexTangentsDirty;
		bool _vertexNormalsDirty;
		bool _useFaceWeights;
		bool _autoGenerateUVs;
		bool _autoDeriveVertexTangents;
		bool _autoDeriveVertexNormals;
		int _numTriangles;
		Array< bool > _indicesInvalid;
		Array< ::Dynamic > _indexBufferContext;
		int _numIndices;
		Array< ::Dynamic > _indexBuffer;
		Array< int > _indices;
		Array< Float > _faceTangents;
		bool _faceTangentsDirty;
		bool _faceNormalsDirty;
		Array< Float > _vertexData;
		::away3d::core::base::Geometry _parentGeometry;
};

} // end namespace away3d
} // end namespace core
} // end namespace base

#endif /* INCLUDED_away3d_core_base_SubGeometryBase */ 
